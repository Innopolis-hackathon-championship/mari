import telebot
from segno import*
from telebot import types
import random
import sqlite3
import webbrowser
import string
from config import Config
import asyncio
indificator = None


m = ["doedo.inno", "edjfi.inno", "feodo.inno"]
soup = ["–°–æ–ª—è–Ω–æ—á–∫–∞",'- 34 —Ä—É–±.', "–ë–æ—Ä—â–∏–∫",'- 56 —Ä—É–±.']
basic = ["–ö–æ—Ç–ª–µ—Ç–æ—á–∫–∞",'- 45 —Ä—É–±.',"–ë–∏—Ç–æ—á–∫–∏",'- 90 —Ä—É–±.']
garnish = ["–ü—é—Ä–µ—à–æ—á–∫–∏",'- 13 —Ä—É–±.', "–ì—Ä–µ—á–∞",'- 15 —Ä—É–±.']
drinks = ["–ö–æ–º–ø–æ—Ç–∏–∫",'- 12 —Ä—É–±.', "–ß–∞–µ—á–µ–∫",'- 14 —Ä—É–±.']

bot = telebot.TeleBot(token=Config.token)
indif = None

class UserQueue:
    def __init__(self):
        self.queue = []

    def enqueue(self, user_id):
        if user_id not in self.queue:
            self.queue.append(user_id)

    def dequeue(self):
        if self.is_empty():
            return None
        return self.queue.pop(0)

    def is_empty(self):
        return len(self.queue) == 0

    def size(self):
        return len(self.queue)

    def display_queue(self):
        if self.is_empty():
            return "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
        queue_message = "–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n"
        for idx, user_id in enumerate(self.queue, start=1):
            queue_message += f'{idx}. {user_id}\n'
        return queue_message

    def remove_user(self, user_id):
        if user_id in self.queue:
            self.queue.remove(user_id)

    def notify_first_user(self):
        if not self.is_empty():
            first_user_id = self.queue[0]
            bot.send_message(first_user_id, '–í—ã –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–π–¥–∏—Ç–µ.')

user_queue = UserQueue()

@bot.message_handler(commands=['enqueue'])
def enqueue_user(message):
    user_id = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not cart.items:
        bot.reply_to(message, '–ß—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        return

    user_queue.enqueue(user_id)
    bot.reply_to(message, f'–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.')
    user_queue.notify_first_user()
@bot.message_handler(commands=['dequeue'])
def dequeue_user(message):
    user_id = user_queue.dequeue()
    if user_id is None:
        bot.reply_to(message, '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.')
    else:
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.')

@bot.message_handler(commands=['size'])
def queue_size(message):
    size = user_queue.size()
    bot.reply_to(message, f'–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {size}.')

@bot.message_handler(commands=['display'])
def display_queue(message):
    queue_message = user_queue.display_queue()
    bot.reply_to(message, queue_message)

@bot.message_handler(func=lambda message: message.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑')
def remove_user_from_queue(message):
    user_id = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    if user_id not in user_queue.queue:
        bot.reply_to(message, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏. –ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return

    user_queue.remove_user(user_id)
    rl = generate_random_letters(50)
    print(rl)
    qrcode = make_qr(rl)
    qrcode.save("metanit_qr.png", dark="#2980B9", border=4, scale=5)
    file = open('./metanit_qr.png', 'rb')
    bot.send_photo(message.chat.id, file)
    bot.reply_to(message, '–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.')

class CartItem:
    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity

class Cart:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        for existing_item in self.items:
            if existing_item.name == item.name:
                existing_item.quantity += item.quantity
                return
        self.items.append(item)

    def remove_item(self, item):
        self.items.remove(item)

    def clear_cart(self):
        self.items = []

    def get_total_price(self):
        total = 0
        for item in self.items:
            total += item.price * item.quantity
        return total

    def display_cart(self):
        cart_message = ''
        for item in self.items:
            cart_message += f'{item.name} - {item.quantity} —à—Ç., –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n'
        cart_message += f'–ò—Ç–æ–≥–æ: {self.get_total_price()} —Ä—É–±.'
        return cart_message

cart = Cart()

@bot.message_handler(commands=['–î–æ–±–∞–≤–∏—Ç—å'])
def add_item(message):
    item_name = message.text.split()[1]
    item_price = 0
    item_quantity = 1

    if item_name == '–±–æ—Ä—â':
        item_price = 45
    elif item_name == '–±–∏—Ç–æ—á–∫–∏':
        item_price = 75
    elif item_name == '–ø—é—Ä–µ—à–æ—á–∫–∞':
        item_price = 20
    elif item_name == '–≥—Ä–µ—á–µ—á–∫–∞':
        item_price = 25
    elif item_name == '—ç—à–ø–æ—à–º–∞–∫':
        item_price = 34
    elif item_name == '–ß–∏–±—É—Ä–µ—á–µ–∫':
        item_price = 99999
    else:
        bot.reply_to(message, '–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –±—É—Ñ–µ—Ç–µ.')
        return

    item = CartItem(item_name, item_price, item_quantity)
    cart.add_item(item)
    bot.reply_to(message, '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')

@bot.message_handler(commands=['–¶–µ–Ω–∞'])
def display_cart(message):
    cart_message = cart.display_cart()
    bot.reply_to(message, cart_message)

@bot.message_handler(commands=['–û—Ç—á–∏—Å—Ç–∏—Ç—å'])
def clear_cart(message):
    cart.clear_cart()
    bot.reply_to(message, '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.')


def generate_random_letters(length):
    letters = string.ascii_letters
    random_letters = ''.join(random.choice(letters) for _ in range(length))
    return random_letters

#–Ω–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —à–∫–æ–ª—å–Ω–∏–∫ –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['start'])
def indification(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(''))
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ä—Ç–æ—Ä!')
    if message.text.lower() == 'doedo.inno':
        bot.send_message(message.chat.id, 'dfghjkl')

@bot.message_handler()
def info(message):
    if message.text in m:
        bot.send_message(message.chat.id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.first_name}')
        menu(message)
    elif message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ê–Ω–¥—Ä–µ–π')
    elif message.text.lower() == 'id':
        bot.reply_to(message, f"ID, {message.from_user.id}")
    elif message.text.lower() == '—Ö–æ—á—É —ç—á–ø–æ—á–º–∞–∫':
        webbrowser.open_new_tab(
            'https://www.google.com/search?q=%D1%85%D0%BE%D1%87%D1%83+%D1%8D%D1%87%D0%BF%D0%BE%D1%87%D0%BC%D0%B0%D0%BA&sca_esv=572890011&rlz=1C1GCEU_ruRU1029RU1029&tbm=isch&sxsrf=AM9HkKkoAsdWqYClJiNzYzYU2CubV8KHnw:1697130072329&source=lnms&sa=X&ved=2ahUKEwjk0eSY_vCBAxUyLRAIHSHwDYwQ_AUoAXoECAMQAw&biw=1536&bih=747&dpr=1.25#imgrc=_YfNV51Hmto2TM')
        file = open('./photo.jpg', 'rb')
        bot.send_photo(message.chat.id, file)
    elif message.text.lower() == '–º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        vibor(message)
        file = open('./menu_add.jpg', 'rb')
        bot.send_photo(message.chat.id, file)
    elif message.text.lower() == '—Å—É–ø—ã ü•ò':
        for i in range(0,len(soup),2):
            bot.send_message(message.chat.id, soup[i])
    elif message.text.lower() == '–≤—Ç–æ—Ä–æ–µ üçõ':
        for i in range(0,len(soup),2):
            bot.send_message(message.chat.id, basic[i])
    elif message.text.lower() == '–≥–∞—Ä–Ω–∏—Ä üçö':
        for i in range(0,len(soup),2):
            bot.send_message(message.chat.id, garnish[i])
    elif message.text.lower() == '–Ω–∞–ø–∏—Ç–∫–∏ üßã':
        for i in range(0,len(soup),2):
            bot.send_message(message.chat.id, drinks[i])
    elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é':
        if message.from_user.id == 829836737:
            pass
    elif message.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑':
        rl = generate_random_letters(50)
        print(rl)
        qrcode = make_qr(rl)
        # —Ü–≤–µ—Ç - #2980B9, –≥—Ä–∞–Ω–∏—Ü–∞ - 4, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤ 5 —Ä–∞–∑
        qrcode.save("metanit_qr.png", dark="#2980B9", border=4, scale=5)
        file = open('./metanit_qr.png','rb')
        bot.send_photo(message.chat.id, file)
    elif message.text.lower() == '–Ω–∞–∑–∞–¥':
        menu(message)
    elif message.text.lower() == '–∫–æ—Ä–∑–∏–Ω–∞':
        korzina(message)
    elif message.text.lower() == '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å':
        queue(message)




@bot.message_handler()
def vibor(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–°—É–ø—ã ü•ò')
    btn2 = types.KeyboardButton('–í—Ç–æ—Ä–æ–µ üçõ')
    markup.add(btn1,btn2)
    btn3 = types.KeyboardButton('–ì–∞—Ä–Ω–∏—Ä üçö')
    btn4 = types.KeyboardButton('–ù–∞–ø–∏—Ç–∫–∏ üßã')
    btn5 = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(btn3, btn4)
    markup.add(btn5)
    bot.send_message(message.chat.id, '–í–æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é!', reply_markup=markup)


@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å')
    markup.add(btn1)
    btn2 = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞')
    btn3 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑')
    btn4 = types.KeyboardButton('–ú–µ–Ω—é')
    markup.add(btn2, btn3)
    markup.add(btn4)
    bot.send_message(message.chat.id, '–í–æ—Ç –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!', reply_markup=markup)
@bot.message_handler()
def korzina(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ä—â üçõ')
    btn2 = types.KeyboardButton('/–î–æ–±–∞–≤–∏—Ç—å –ø—é—Ä–µ—à–æ—á–∫–∞ ü•ß')
    markup.add(btn1,btn2)
    btn3 = types.KeyboardButton('/–î–æ–±–∞–≤–∏—Ç—å –±–∏—Ç–æ—á–∫–∏ üßÜ')
    btn4 = types.KeyboardButton('/–î–æ–±–∞–≤–∏—Ç—å –≥—Ä–µ—á–µ—á–∫–∞ ü´ò')
    markup.add(btn3,btn4)
    btn5 = types.KeyboardButton('/–î–æ–±–∞–≤–∏—Ç—å —ç—à–ø–æ—à–º–∞–∫ ü•†')
    btn6 = types.KeyboardButton('/–î–æ–±–∞–≤–∏—Ç—å –ß–∏–±—É—Ä–µ—á–µ–∫ ü•ü')
    markup.add(btn5,btn6)
    btn7 = types.KeyboardButton('/–¶–µ–Ω–∞')
    btn8 = types.KeyboardButton('/–û—Ç—á–∏—Å—Ç–∏—Ç—å')
    markup.add(btn7,btn8)
    btn9 = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(btn9)
    bot.send_message(message.chat.id, '–í–æ—Ç —á—Ç–æ –µ—Å—Ç—å –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ', reply_markup=markup)

@bot.message_handler()
def queue(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/enqueue')
    btn2 = types.KeyboardButton('/dequeue')
    markup.add(btn1, btn2)
    btn3 = types.KeyboardButton('/display')
    markup.add(btn3)
    btn4 = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(btn4)
    bot.send_message(message.chat.id, '–í–æ—Ç –æ—á–µ—Ä–µ–¥—å', reply_markup=markup)


bot.infinity_polling()